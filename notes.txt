One of the ways to solve circular dependancies is to move the 
offending module(import) to the bottom. 

@app.route() -> decorator allows assignment of more than one url to a view function

add top level script that represents the application will be microblog.py

---

since there are no users yet, to build a new app with feature which doesnt exist,
use dummy variables/users/data to build base of the feature. 

-- using jinja2, both {{user.username}}, {{user['username']}} works. 

flask apps configs can be done as keys in app.config[''] ways
or to enforce the principle of 'seperation of concerns', 
using a slighly more elaborate structure, keep configs in a seperate file. 
--its extensible using python class to store configs
--seperate module gives better organization of files
-- this way cann add/remove configs,
--if more than one config set, can create subclasses. 

- Flask and some of its extensions use secret key as a cryptographic key,
 useful to generate signatures or tokens, 
 -wtf uses it to protect forms against CSRF (seasurf)
 cross site request forgery

-----
The novalidate attribute tells the web browser to not apply validation 
to the fields in this form, leaving this task to the Flask application running in the server.

-- .hidden_tag generates hidden field that has token to protect against CSRF

-- forms can have more than one validators so form.fieldname.errors will be a list. #

--better to use url_for()
-URLs more likely to change than view functions, 
-some URLs have dynamic component in them, so will have to concat strings
this is a test tio check the new keyboard hf hf sd 

DATABASE:

flask migrate is used to help migrate old data to new structure when 
the structure of the database changes, as application grows and changes. 

flask-sqlalchem doesnt do this , but only hlps in creation and updating of datadase. 
supports 
--sqlite, a small file base database, postgress and sql. 
can use sqlite for dev and and on production server can switch to postgres without making changes. ?? nice 

to tell flask type and location of database 
add var to config file --  

'sqlite:// [hostname]-> sqlite:/// 
third / is to skip the hostname to tell locally stored file  

-track modification - to tell flask how to behave everytime models/object changes, if its 
not given clear instructions, it'll throw errors, so set to False for now. 

---
Add index=True for search. 
relations dbs do search well if data is indexed.

-- Migration 
to take db as python object and initialise the migration framework(repo) to maintain db 
flask init db

after migration repo, do first migration 
flask db migrate -m 'description'

this migration hasnt been done to db yet. 
flask db history, current gives relevant info of migrations. 

db.ForeignKey('user.id') -- represents authorship of the Post table 

backref='author' -> adds author attribute to Post model, so as to access post.author 
to give user instance, 

lazy = dynamic --> makes posts attribute a query instead of list of posts 
this will allows adding(qualifiers) more filters, sorting and other actions on posts 

--
chapter 5. Auth

Flask-login

manages user logged in state, remembers logged in state when user navigates to diff pages,
'remember_me' feature when browser is closed. 

it works with apps User model and expects certain properties, methods to be implemented. 
requires 4 items. 'check blog'

These are also provided by flask-login, by a 
UserMixin class, for safe implementation for most user model classes. 


flask-login passes ID as string so convert to int for any db that use int IDs. 

*********
User Profile 

create hash with md5, 
use http://gravatar.com/avatar/hash to render image
default if not set. can set size. 

-----

seperate blog post into sub templates since its used by other templates
--better to start sub templates with _ (underscore)

********
-- to add last_seen, keep track when a user is logged in/requests a page on all routes, 
--better way to DRY is.. using before_request handler, 
-- the logic that involves to all the routes can be included in this function

--- db.session.commit() -- directly committing here without .add()  
since user object is already loaded in the session when the user logs in 
and the flask_login function invokes the user loader function to load it from  
the id that is stored in the user session. 

************

Edit user details :

Length(min=0, max=140) -> min =0 makes about_me optional. 

**********

Error handling
------

Flask reloader:

@app.errorhandler

flask sends error exceptions into this funtion in case we need it 
to generate the error page 

By default return render_template('500.html') send 200 success status code as HTTP response. 
but can add correct status code after like 
return render_template('500.html'), 500 

include erros module into init app

=====

Sending errors by email:

To get notifications when bugs occur and get trace of it. 
First config an email server for the app to use to send emails 
    mail_port, has to be int, add default, 
    need a flag that check if the app is using encripted connection to 
    the email server or not. 
    -need username and password
    admins, are the receipients of the error emails. 

then tell flask to send errors, 
    flask is already logging all the errors in the app
    flask uses standard logging object from python standard library
    can attach additional handlers that can send errors, even list of email addresses

Logging errors into a file. 

**************
Adding followers
**************

DB relations:

One to Many, one author many posts. 
All Posts have only one author. 

This is represented on Posts (many side) by
user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
This has actual value on the database. 
Saying the owner of the row is on user table with id. 

on the One (user side), this is represented by, 
posts = db.relationship('Post', backref='author', lazy='dynamic')

this posts, is a higher level construct only exists in model space but not in the database. 
This is given by sqlalchemy for internal operations and value is not stored. 
the posts attribute in the model class represents a database query that is auto generated by sqlalchemy
and the author attribute is added to the posts model the same way. 
to access author.username 

For followers, User refers to other users in the same model/entity. 
This is called self referential.

followers = db.Table(
    'followers',
    db.Column('follower_id',db.Integer, db.ForeignKey('user.id')),
    db.Column('followed_id',db.Integer, db.ForeignKey('user.id'))
)

an auxiliary table containing 'followers' information. 
there is no model for this. just using sqlalchemy to connect users in a follower->followed 
relationship

need two sides of a relationship, 
    follower is the one who is following - left
    followed is the one being followed - right


followed = db.relationship(
        'User',  secondary = followers,
        primaryjoin = (followers.c.follower_id == id),
        secondaryjoin = (followers.c.followed_id == id),
        backref = db.backref('followers', lazy='dynamic'), lazy='dynamic')

'User',  secondary = followers,
    since we have an auxiliary table, we've to define that.  
Here
    followed: This user followed... [list of users] current user is following.
    'User' : since this relationship with another 'User' of the same entity/model.
    Now to define the many to many relationship, 
    sqlalchemy will not know just from 'follower' table which is the left side, follower side 
    and right side the followed side, since follower table has pretty much identicle ForeignKeys 
    so we've to add pair of arguments to define how to use these ForeignKeys

    primaryjoin: takes an expression that sqlalchemy can use to generate db query
        followers.c.follower_id == id #I'm a follower
    secondaryjoin: for the right side 
        followers.c.followed_id == id #  who followed
    backref : to define relationship from right side, that given an 'user', 
        we can get all the users that are following 'that user'. 
        'followers' ---> who are my followers 


** implementing logic of adding/remove followers 













 